{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"inseri core","text":"<p>Scientific and Interactive Gutenberg Blocks for WordPress to facilitate Open Science</p> <p>inseri core is a WordPress plugin developed as part of inseri.swiss swissuniversities project \u2013 Programme Open Science I (2021-2024).</p> <p>inseri core introduces scientific and interactive Gutenberg blocks to facilitate open science.</p> <p>It uses special blocks to make content created on WordPress interactive. These blocks are not isolated elements but they can receive input from and give output to other blocks. A typical example would start with a text block containing the configuration for a dropdown. Selecting one option in the dropdown would provide an API block with the parameters to query data from an external source. Using a Python block, the response could then be transformed into a format which a block for graphs can display.</p> <p>inseri name comes from the Latin insero which means to sow, to plant but also to insert.</p> <ul> <li>More information about the project can be found at inseri.swiss/about.</li> <li>For examples and showcases see inseri.swiss.</li> <li>Detailed documentation is available at docs.inseri.swiss.</li> <li>Try out our Playground.</li> <li>For Ideas and Questions please use GitHub Discussions.</li> <li>Bug and Issue reports are welcome on GitHub Issues.</li> <li>The development takes place on GitHub.</li> </ul> <p>Do you want to get regular notifications? Watch the GitHub repository! Do you want to show your interest? Star the and GitHub repository and Follow inseri.swiss organization!</p>"},{"location":"getting_started/","title":"Getting started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>inseri core for WordPress is available as an official WordPress plugin.</p> <p>If you have an WordPress deployment, simply follow Finding and Installing Plugins.</p> <p>Alternatively you can check out the functionalities in the inseri Playground. Please see How to use inseri Playground. Be aware that changes there are temporary and will be gone after a page refresh.</p>"},{"location":"getting_started/#wordpress-posts-and-pages","title":"WordPress Posts and Pages","text":"<p>The typical use case with WordPress and inseri is to write a post or page consisting of several blocks. For saving, previewing, and upating posts or pages, follow the description about the WordPress Block Editor.</p> <p>The further documentation will always assume that you already have a post or page to work on, and we will call it simply post.</p>"},{"location":"getting_started/#adding-inseri-blocks-to-a-post","title":"Adding inseri blocks to a post","text":"<p>On a WordPress instance with the inseri blocks installed, the list of available blocks will include a collection with the name \"inseri\". You can add an inseri block like any other block through the \"+\" icon (called Block inserter) on top left or inside a post. Alternatively you can use the slash command for a quicker workflow. After accepting a block, it is visible in the content of the post, showing the most important options directly in its body, like selecting the block source of which the output will be imported. Through settings sidebar on the right, more settings are available, generally for naming the block, visibility, or just styling.</p> <p>Please follow the documentation about Adding a new block for more details.</p>"},{"location":"getting_started/#where-to-start","title":"Where to start","text":"<p>We recommend you to start with our Hello World.</p>"},{"location":"blocks/cytoscape/","title":"Cytoscape","text":"<p>It displays graphs using inputs from another blocks using Cytoscape.js.</p>"},{"location":"blocks/cytoscape/#output","title":"Output","text":"<p>Selected node or edge as JSON.</p>"},{"location":"blocks/cytoscape/#input","title":"Input","text":"<p>The input corresponds to the <code>elements</code> objects from Cytoscape.js - Elements JSON. Next we provide the <code>nodes</code> and <code>edges</code> groups that are automatically inferred:</p> <pre><code>[\n    { \"data\": { \"id\": \"a\", \"label\": \"A\" } },\n    { \"data\": { \"id\": \"b\", \"label\": \"B\" } },\n    { \"data\": { \"id\": \"c\", \"label\": \"C\" } },\n    { \"data\": { \"id\": \"d\", \"label\": \"D\" } },\n    { \"data\": { \"id\": \"e\", \"label\": \"E\" } },\n    { \"data\": { \"id\": \"f\" } },\n    { \"data\": { \"id\": \"ab\", \"source\": \"a\", \"target\": \"b\" } },\n    { \"data\": { \"id\": \"cd\", \"source\": \"c\", \"target\": \"d\" } },\n    { \"data\": { \"id\": \"ef\", \"source\": \"e\", \"target\": \"f\" } },\n    { \"data\": { \"id\": \"ac\", \"source\": \"a\", \"target\": \"c\" } },\n    { \"data\": { \"id\": \"be\", \"source\": \"b\", \"target\": \"e\" } }]\n</code></pre>"},{"location":"blocks/cytoscape/#parameters","title":"Parameters","text":""},{"location":"blocks/cytoscape/#layout","title":"Layout","text":"<p>The layout used to display the graph. The default layout is dagre.</p>"},{"location":"blocks/cytoscape/#events","title":"Events","text":""},{"location":"blocks/cytoscape/#extended-configuration","title":"Extended configuration","text":""},{"location":"blocks/cytoscape/#provide-custom-style","title":"Provide custom style","text":"<p>Replace <code>style</code> from Cytoscape.js - Elements JSON. Example:</p> <pre><code>[\n    {\n        \"selector\": \"node\",\n        \"style\": {\n            \"label\": \"data(id)\"\n        }\n    }\n]\n</code></pre>"},{"location":"blocks/cytoscape/#provide-additional-layout-config","title":"Provide additional layout config","text":"<p>Replace <code>layout</code> from Cytoscape.js - Elements JSON. Example:</p> <pre><code>{ \"name\": \"cose\" }\n</code></pre>"},{"location":"blocks/cytoscape/#examples","title":"Examples","text":"<p>Cytoscape Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the Plotly chart block.</p>"},{"location":"blocks/dataTable/","title":"Data Table","text":"<p>The data table block displays tabular data of another block and gives guests the option to explore it.</p> <p>It allows as output the selected row and the selected cell.</p>"},{"location":"blocks/dataTable/#output","title":"Output","text":"<p>The filtered and sorted table, selected row (via a click on a cell), and selected cell (via a double-click on a cell if enabled) as a JSON.</p>"},{"location":"blocks/dataTable/#input","title":"Input","text":"<p>The expected input is a JSON array with row-oriented data, where each row is an object with named attributes (known also as JSON records).</p> <pre><code>[\n    { \"a\": \"A\", \"b\": 28 },\n    { \"a\": \"B\", \"b\": 55 },\n    { \"a\": \"C\", \"b\": 43 },\n    { \"a\": \"D\", \"b\": 91 },\n    { \"a\": \"E\", \"b\": 81 },\n    { \"a\": \"F\", \"b\": 53 },\n    { \"a\": \"G\", \"b\": 19 },\n    { \"a\": \"H\", \"b\": 87 },\n    { \"a\": \"I\", \"b\": 52 }\n]\n</code></pre>"},{"location":"blocks/dataTable/#extended-configuration","title":"Extended configuration","text":""},{"location":"blocks/dataTable/#choose-column-config","title":"Choose column config","text":"<p>It allows to rename the columns, define the columns for hierarchical objects, and much more. Please see https://www.mantine-react-table.com/docs/guides/data-columns.</p>"},{"location":"blocks/dataTable/#parameters","title":"Parameters","text":"<p>The main and Toolbar settings are self explanatory.</p> <p>The row virtualization should be enabled for very long tables. It should provide a better performance</p>"},{"location":"blocks/dataTable/#extra-settings","title":"Extra settings","text":"<ul> <li>\"Emit row on click\" allows to output the selected row. You have to first select a row to have access to it</li> <li>\"Emit cell on double-click\" allows to output the selected cell. You have to first double-click a cell to have access to it.</li> <li>\"Cell editing on double-click\". By default disabled, allows to guests to edit a cell. This option is not compatible with the \"Emit cell on double-click\" option.</li> </ul>"},{"location":"blocks/dataTable/#examples","title":"Examples","text":"<p>Data Table Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the data table block.</p>"},{"location":"blocks/download/","title":"Download","text":"<p>Download the output from another block into a file.</p>"},{"location":"blocks/download/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/download/#input","title":"Input","text":"<p>Output from any other block in the same post. After adding the download block, the dropdown will list the available block sources.</p>"},{"location":"blocks/download/#parameters","title":"Parameters","text":""},{"location":"blocks/download/#label","title":"Label","text":"<p>On a published post, the download block will appear as a button. The label parameter allows changing it to something different from the default \"Download\".</p>"},{"location":"blocks/download/#file-name","title":"File name","text":"<p>Set the name under which the file will be downloaded.</p>"},{"location":"blocks/download/#determine-file-extension-automatically","title":"Determine file extension automatically","text":"<p>By default the file extension will be added automatically depending on the data type. However this can be turned off and the file extension can be defined as desired.</p>"},{"location":"blocks/download/#examples","title":"Examples","text":"<p>Download Block in inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the download block.</p>"},{"location":"blocks/dropdown/","title":"Dropdown","text":"<p>The dropdown block can be used to make the content on your page dynamic by allowing to switch between different items.</p>"},{"location":"blocks/dropdown/#output","title":"Output","text":"<p>The selected item (or the corresponding \"value\" key) as JSON.</p>"},{"location":"blocks/dropdown/#input","title":"Input","text":"<p>The expected input is a JSON array that can have as elements strings:</p> <pre><code>[\"item 1\", \"item 2\", \"item 3\"]\n</code></pre> <p>or objects (name-value pairs, know also as key-value pairs) with the mandatory names (called also keys): <code>\"label\"</code> and <code>\"value\"</code>:</p> <pre><code>[\n    { \"label\": \"item 1\", \"value\": { \"bar\": 11, \"foo\": 3 } },\n    { \"label\": \"item 2\", \"value\": 42 },\n    { \"label\": \"item 3\", \"value\": \"Foo bar\" }\n]\n</code></pre> <p>For the first case the dropdown corresponds to its elements and the block output is the selected string element</p> <ul> <li><code>\"item 1\"</code></li> <li><code>\"item 2\"</code></li> <li><code>\"item 3\"</code></li> </ul> <p>For the second case the download corresponds to all <code>\"label\"</code>:</p> <ul> <li><code>\"item 1\"</code></li> <li><code>\"item 2\"</code></li> <li><code>\"item 3\"</code></li> </ul> <p>but the block output is the <code>\"value\"</code> of the selected <code>\"label\"</code>:</p> <ul> <li><code>{\"bar\":11,\"foo\":3}</code> for <code>\"item 1\"</code></li> <li><code>42</code> for <code>\"item 2\"</code></li> <li><code>\"Foo bar\"</code> for <code>\"item 3\"</code></li> </ul>"},{"location":"blocks/dropdown/#parameters","title":"Parameters","text":""},{"location":"blocks/dropdown/#label","title":"Label","text":"<p>You can change the text above the dropdown to something else than the default \"Choose an item\".</p>"},{"location":"blocks/dropdown/#searchable","title":"Searchable","text":"<p>Allow keyboard input to match labels.</p>"},{"location":"blocks/dropdown/#clearable","title":"Clearable","text":"<p>Allow the selection to be reset to undefined.</p>"},{"location":"blocks/dropdown/#examples","title":"Examples","text":"<p>Dropdown Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the dropdown block.</p>"},{"location":"blocks/export/","title":"Export","text":"<p>The Export block is intended for making the post or page content open access by allowing the visitors to download the corresponding blueprint.json and WXR file.</p> <p>By clicking on the <code>Export</code> button, a zip archive will be downloaded locally. Unzip it and read the <code>readme.md</code> file.</p> <p>Warning</p> <p>The Media Library content is not supported. Therefore it is not compatible with the Media Collection Block.</p> <p>Warning</p> <p>This block is not compatible with WordPress Synced Patterns:</p> <ul> <li>the Export block doesn't work properly if it's part of a synced pattern</li> <li>a synced pattern cannot be exported to allow its reuse because the corresponding XML only contains a reference to the original content and not the content itself</li> </ul>"},{"location":"blocks/export/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/export/#input","title":"Input","text":"<p>No input.</p>"},{"location":"blocks/export/#examples","title":"Examples","text":"<p>Export Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the Export block.</p>"},{"location":"blocks/html/","title":"HTML Code","text":"<p>The HTML Code block is intended for displaying HTML that is created dynamically or loaded from another source. For static content, the native Wordpress blocks can be used.</p>"},{"location":"blocks/html/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/html/#input","title":"Input","text":"<p>The HTML Code block expects HTML from any block as input.</p>"},{"location":"blocks/html/#examples","title":"Examples","text":"<p>HTML Code Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the HTML block.</p>"},{"location":"blocks/iiifViewer/","title":"IIIF Viewer","text":"<p>The IIIF Viewer block can be fed with a IIIF Manifest. It relies on Clover viewer and allows the usage of the API Manifest to view images and audio/visual content.</p>"},{"location":"blocks/iiifViewer/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/iiifViewer/#input","title":"Input","text":"<p>The block expects a valid IIIF manifest as text from any block as input.</p>"},{"location":"blocks/iiifViewer/#parameters","title":"Parameters","text":""},{"location":"blocks/iiifViewer/#show-content-title","title":"Show Content Title","text":"<p>The title is displayed.</p>"},{"location":"blocks/iiifViewer/#show-information-panel","title":"Show Information Panel","text":"<p>The information panel is shown.</p>"},{"location":"blocks/iiifViewer/#show-iiif-badge","title":"Show IIIF Badge","text":"<p>IIIF Badge Title is displayed.</p>"},{"location":"blocks/iiifViewer/#dynamic-height","title":"Dynamic Height","text":"<p>Height is dynamic.</p>"},{"location":"blocks/iiifViewer/#examples","title":"Examples","text":"<p>IIIF Viewer Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the text viewer block.</p>"},{"location":"blocks/image/","title":"Image Box","text":"<p>The image box can show images from a remote source.</p>"},{"location":"blocks/image/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/image/#input","title":"Input","text":"<p>It expects an image URL or an image object.</p>"},{"location":"blocks/image/#parameters","title":"Parameters:","text":""},{"location":"blocks/image/#caption","title":"Caption","text":"<p>Set a caption that will appear below the image.</p>"},{"location":"blocks/image/#alt-text","title":"Alt text","text":"<p>The alternative text is used for accessibility or if the image does not load.</p>"},{"location":"blocks/image/#height","title":"Height","text":"<p>Adjust the height of the image in pixels.</p>"},{"location":"blocks/image/#resizing-behavior","title":"Resizing behavior","text":"<p>If the width and height of the block have a different ratio than the image, different view modes are available.</p>"},{"location":"blocks/image/#examples","title":"Examples","text":"<p>Media Collection and Image Box Blocks on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the image block.</p>"},{"location":"blocks/javascript/","title":"JavaScript Code","text":"<p>It allows to run JavaScript code in a separate web worker. It is therefore ideal for performing computations in the background.</p> <p>This block allows multiple inputs and outputs. This makes it interesting to tie the behaviors of different blocks together.</p> <p>To set the inputs and outputs for the script, select \"open extended view\" which opens a popup.</p>"},{"location":"blocks/javascript/#output","title":"Output","text":"<p>As defined in the extended view.</p>"},{"location":"blocks/javascript/#input","title":"Input","text":"<p>A JavaScript file or the user can directly write the code. It allows asynchronous behavior and <code>await</code> is permitted within the main body of the code.</p> <p>Moreover in the extended view below it is possible to define input variables.</p>"},{"location":"blocks/javascript/#extended-view","title":"Extended view","text":"<p>Imagine we have the following JavaScript script:</p> <pre><code>let sum = a + b\nlet product = a * b\n</code></pre> <p>You can see that <code>a</code> and <code>b</code> are not defined in this script. On the top right you can set the inputs. Enter the variable name <code>a</code> and accept it with the <code>+</code> button. You can now choose any channel from your post. Repeat this with <code>b</code>. Input variables can be deleted with <code>x</code> next to the import.</p> <p>Outputs can be defined on the bottom left. Enter <code>sum</code> into the text field and accept it with <code>+</code>. Now, choose a content type. For simple values as arrays or numbers, <code>JSON</code> is the best option. Like inputs, output variables can be deleted with <code>x</code>.</p>"},{"location":"blocks/javascript/#parameters","title":"Parameters","text":""},{"location":"blocks/javascript/#label","title":"Label","text":"<p>Add a description above the code block.</p>"},{"location":"blocks/javascript/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if you set it to execute automatically.</p>"},{"location":"blocks/javascript/#execute-automatically","title":"Execute automatically","text":"<p>The script will run automatically on load and any input change. If set to false, the script will have to be run explicitly.</p>"},{"location":"blocks/javascript/#publicly-editable","title":"Publicly editable","text":"<p>JavaScript Code block can be set to publicly editable. This may be interesting if you want to show calculations depending on certain parameters. After a page reload the changes in the code will be lost.</p>"},{"location":"blocks/javascript/#examples","title":"Examples","text":"<p>JavaScript Code Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the JavaScript Code block.</p>"},{"location":"blocks/localFileImport/","title":"Local File Import","text":"<p>Upload data from your computer for input in other blocks.</p>"},{"location":"blocks/localFileImport/#output","title":"Output","text":"<p>The input file selected by the user.</p>"},{"location":"blocks/localFileImport/#parameters","title":"Parameters","text":""},{"location":"blocks/localFileImport/#support-multiple-files","title":"Support multiple files","text":"<p>The local file import block can support more than one file. the user will be able to switch between the files that are given as output.</p>"},{"location":"blocks/localFileImport/#which-file-types-are-accepted","title":"Which file types are accepted","text":"<p>File types that are accepted. This field makes sure that communication between blocks stays compatible.</p>"},{"location":"blocks/localFileImport/#primary-text","title":"Primary text","text":"<p>You can change the text in the block to something different from the default \"Drag and drop a file or click here\".</p>"},{"location":"blocks/localFileImport/#secondary-text","title":"Secondary text","text":"<p>You can also change the subtitle in the block to be different from the default \"provide your file to process...\".</p>"},{"location":"blocks/localFileImport/#examples","title":"Examples","text":"<p>Local File Import Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the local file import block.</p>"},{"location":"blocks/mediaCollection/","title":"Media Collection","text":"<p>User can select multiple files from media library. Upon selection of a single file, the block will load the file and emit its content as an output.</p> <p>If you already uploaded your desired file, you can choose it from the Media Library, otherwise you can upload it after adding the block.</p> <p>Warning</p> <p>Not compatible with the Export Block.</p>"},{"location":"blocks/mediaCollection/#output","title":"Output","text":"<p>The selected file.</p>"},{"location":"blocks/mediaCollection/#parameters","title":"Parameters","text":""},{"location":"blocks/mediaCollection/#label","title":"Label","text":"<p>Add a description above the block.</p>"},{"location":"blocks/mediaCollection/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if you choose one file from the Media Library.</p>"},{"location":"blocks/mediaCollection/#extended-view","title":"Extended view","text":"<p>In the Media Library, you can organize your files that will be available for re-use in your posts.</p>"},{"location":"blocks/mediaCollection/#metadata","title":"Metadata","text":"<p>Alt text: Alternative text for images.</p> <p>Title: Label for the file. The default value is derived from the original file value.</p> <p>Caption: Text to be shown below images.</p> <p>Description: Text description of the file.</p> <p>File URL: Location of the file after upload.</p>"},{"location":"blocks/mediaCollection/#examples","title":"Examples","text":"<p>Media Collection and Image Box Blocks on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the zenodo repository block.</p>"},{"location":"blocks/overview/","title":"Overview","text":"<p>inseri core provides interactive and executable blocks. The blocks have names, which are integrated with the WordPress List View, and are not isolated but they can receive input from and give output to compatible blocks.</p> <p>If you want to see them in practice please see the inseri core blocks on inseri.swiss.</p>"},{"location":"blocks/overview/#use-cases","title":"Use cases","text":"<ul> <li>Interactive online tool via interactive online components with all inseri blocks, e.g. Plotly Chart, Dropdown</li> <li>Data reuse and integration of: local user data with the Media Collection and Local File Import blocks, and data interfaces with Zenodo Repository and Web API blocks</li> <li>Data analysis and simulation via compute interfaces with Python Code, R Code, JavaScript Code, Web API blocks</li> </ul>"},{"location":"blocks/overview/#features","title":"Features","text":"<ul> <li>Open and Citable via the Export block</li> <li>Publicly Editable to allow the visitors to change the content of given blocks</li> <li>Invisible blocks to hide from the visitors given blocks</li> <li>Share State to share the changes or the selection with other visitors via the Share block</li> </ul>"},{"location":"blocks/overview/#edit-the-source","title":"Edit the Source","text":"<p>You can edit the source of blocks by clicking on the edit icon.</p> <p></p> Edit icon"},{"location":"blocks/overview/#change-the-alignment","title":"Change the Alignment","text":"<p>You can change the alignment or the width of a block by clicking on the Align icon and selecting the desired option.</p> <p></p> Align icon"},{"location":"blocks/plotly/","title":"Plotly Chart","text":"<p>It allows to visualize the data of another block using Plotly.js, where the data should follow Plotly JSON chart schema.</p> <p>For examples of charts in this format, please see Chart Studio Community Feed and open the desired file in Viewer, select the tab \"Python &amp; R\" or export it directly as Data \".json\" format.</p>"},{"location":"blocks/plotly/#output","title":"Output","text":"<p>The clicked or hovered element (only if enabled) as a JSON.</p>"},{"location":"blocks/plotly/#input","title":"Input","text":"<p>The standard format by Plotly</p> <pre><code>{\n    \"data\": [\n        {\n            \"uid\": \"f4de1f\",\n            \"hole\": 0.1,\n            \"name\": \"Col2\",\n            \"pull\": 0,\n            \"type\": \"pie\",\n            \"domain\": {\n                \"x\": [0, 1],\n                \"y\": [0, 1]\n            },\n            \"marker\": {\n                \"colors\": [\n                    \"#7fc97f\",\n                    \"#beaed4\",\n                    \"#fdc086\",\n                    \"#ffff99\",\n                    \"#386cb0\"\n                ]\n            },\n            \"textinfo\": \"label+value\",\n            \"hoverinfo\": \"all\",\n            \"labels\": [\n                \"quarter piece\",\n                \"third piece\",\n                \"sixth\",\n                \"tenth\",\n                \"3/20\"\n            ],\n            \"values\": [\n                \"25\",\n                \"33.33\",\n                \"16.67\",\n                \"10\",\n                \"15\"\n            ],\n            \"showlegend\": false\n        }\n    ],\n    \"layout\": {\n        \"title\": \"Division of the cake\",\n        \"width\": 800,\n        \"height\": 500,\n        \"autosize\": false\n    },\n    \"frames\": []\n}\n</code></pre>"},{"location":"blocks/plotly/#extended-configuration","title":"Extended configuration","text":""},{"location":"blocks/plotly/#override-data-separately","title":"Override data separately","text":"<pre><code>[\n  {\n    \"x\": [\n      \"giraffes\",\n      \"orangutans\",\n      \"monkeys\"\n    ],\n    \"y\": [\n      20,\n      14,\n      23\n    ],\n    \"type\": \"bar\"\n  }\n],\n</code></pre>"},{"location":"blocks/plotly/#override-layout-separately","title":"Override layout separately","text":"<p>Replace <code>layout</code> in the input, following the same pattern:</p> <pre><code>{\n    \"title\": \"Division of the cake\",\n    \"width\": 800,\n    \"height\": 500,\n    \"autosize\": false\n}\n</code></pre>"},{"location":"blocks/plotly/#provide-config","title":"Provide config","text":"<p>Additional configuration options by Plotly.</p>"},{"location":"blocks/plotly/#parameters","title":"Parameters","text":""},{"location":"blocks/plotly/#height","title":"Height","text":"<p>Size of the block in the post.</p>"},{"location":"blocks/plotly/#events","title":"Events","text":"<p>Other blocks can listen to <code>hover</code>, <code>click</code> events from this block.</p>"},{"location":"blocks/plotly/#examples","title":"Examples","text":"<p>Plotly Chart Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the Plotly chart block.</p>"},{"location":"blocks/python/","title":"Python Code","text":"<p>It allows to run Python code in the browser using Pyodide.</p> <p>This block allows multiple inputs and outputs. This makes it interesting to tie the behaviors of different blocks together.</p> <p>To set the inputs and outputs for the script, select \"open extended view\" which opens a popup.</p>"},{"location":"blocks/python/#output","title":"Output","text":"<p>As defined in the extended view. JSON serializable objects or binary objects. The generated files are made available to other blocks that can use them as input.</p>"},{"location":"blocks/python/#input","title":"Input","text":"<p>A Python file or the user can directly write the code. Moreover in the extended view below it is possible to define input variables.</p>"},{"location":"blocks/python/#extended-view","title":"Extended view","text":"<p>Imagine we have the following Python script:</p> <pre><code>sum = a + b\nproduct = a * b\n</code></pre> <p>You can see that <code>a</code> and <code>b</code> are not defined in this script. On the top right you can set the inputs. Enter the variable name <code>a</code> and accept it with the <code>+</code> button. You can now choose any channel from your post. Repeat this with <code>b</code>. Input variables can be deleted with <code>x</code> next to the import.</p> <p>Outputs can be defined on the bottom left. Enter <code>sum</code> into the text field and accept it with <code>+</code>. Now, choose a content type. For simple values as lists or numbers, <code>JSON</code> is the best option. Like inputs, output variables can be deleted with <code>x</code>.</p> <p>If you would like to have as output an object that is not JSON serializable, you should save it in a file because the file is an output of the block.</p>"},{"location":"blocks/python/#parameters","title":"Parameters","text":""},{"location":"blocks/python/#label","title":"Label","text":"<p>Add a description above the code block.</p>"},{"location":"blocks/python/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if you set it to execute automatically.</p>"},{"location":"blocks/python/#execute-automatically","title":"Execute automatically","text":"<p>The script will run automatically on load and any input change. If set to false, the script will have to be run explicitly.</p>"},{"location":"blocks/python/#publicly-editable","title":"Publicly editable","text":"<p>Python Code block can be set to publicly editable. This may be interesting if you want to show calculations depending on certain parameters. After a page reload the changes in the code will be lost.</p>"},{"location":"blocks/python/#how-to","title":"How To","text":"<ul> <li>Python Packages</li> <li>Visualizations</li> </ul>"},{"location":"blocks/python/#examples","title":"Examples","text":"<p>Python Code Block using Pyodide on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the Python Code block.</p>"},{"location":"blocks/rCode/","title":"R Code","text":"<p>It allows to run R code in the browser.</p> <p>This block allows multiple inputs and outputs. This makes it interesting to tie the behaviors of different blocks together.</p> <p>To set the inputs and outputs for the script, select \"open extended view\" which opens a popup.</p>"},{"location":"blocks/rCode/#output","title":"Output","text":"<p>As defined in the extended view. Currently not all R objects support conversion to output (see here). The generated files are made available to other blocks that can use them as input.</p>"},{"location":"blocks/rCode/#input","title":"Input","text":"<p>A R file or the user can directly write the code. Moreover in the extended view below it is possible to define input variables.</p>"},{"location":"blocks/rCode/#extended-view","title":"Extended view","text":"<p>Imagine we have the following R script:</p> <pre><code>sum = a + b\nproduct = a * b\n</code></pre> <p>You can see that <code>a</code> and <code>b</code> are not defined in this script. On the top right you can set the inputs. Enter the variable name <code>a</code> and accept it with the <code>+</code> button. You can now choose any channel from your post. Repeat this with <code>b</code>. Input variables can be deleted with <code>x</code> next to the import.</p> <p>Outputs can be defined on the bottom left. Enter <code>sum</code> into the text field and accept it with <code>+</code>. Now, choose a content type. For simple values as lists or numbers, <code>JSON</code> is the best option. Like inputs, output variables can be deleted with <code>x</code>.</p> <p>If you would like to have as output an object that cannot be converted (see here), you should save it in a file because the file is an output of the block.</p>"},{"location":"blocks/rCode/#parameters","title":"Parameters","text":""},{"location":"blocks/rCode/#label","title":"Label","text":"<p>Add a description above the code block.</p>"},{"location":"blocks/rCode/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if you set it to execute automatically.</p>"},{"location":"blocks/rCode/#execute-automatically","title":"Execute automatically","text":"<p>The script will run automatically on load and any input change. If set to false, the script will have to be run explicitly.</p>"},{"location":"blocks/rCode/#publicly-editable","title":"Publicly editable","text":"<p>R Code block can be set to publicly editable. This may be interesting if you want to show calculations depending on certain parameters. After a page reload the changes in the code will be lost.</p>"},{"location":"blocks/rCode/#how-to","title":"How To","text":"<ul> <li>R Packages</li> <li>Visualizations</li> </ul>"},{"location":"blocks/rCode/#examples","title":"Examples","text":"<p>R Code Block using WebR on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the R Code block.</p>"},{"location":"blocks/share/","title":"Share","text":"<p>The Share block enables the guests to share the state of a page with other visitors, allowing them to reproduce it.</p> <p>By clicking on the Share button, a URL containing the state details is copied to the clipboard.</p> <p>The feature is available for the following blocks:</p> <ul> <li>Cytoscape</li> <li>Data Table</li> <li>Dropdown</li> <li>JavaScript Code block</li> <li>Media Collection block</li> <li>Plotly Chart block</li> <li>Python Code block</li> <li>R Code block</li> <li>Slider block</li> <li>Text Editor block</li> <li>Zenodo Repository block</li> </ul>"},{"location":"blocks/share/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/share/#input","title":"Input","text":"<p>No input.</p>"},{"location":"blocks/share/#parameters","title":"Parameters","text":""},{"location":"blocks/share/#primary-text","title":"Primary Text","text":"<p>The text displayed on the button. The default value is \"Share\".</p>"},{"location":"blocks/share/#copied-text","title":"Copied Text","text":"<p>The text displayed for a short time on the button after the URL is copied to the clipboard. The default value is \"Copied\".</p>"},{"location":"blocks/share/#show-icon","title":"Show Icon","text":"<p>Whether to display the share symbol display on the button. By default it is enabled.</p>"},{"location":"blocks/share/#examples","title":"Examples","text":"<p>Share Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the Export block.</p>"},{"location":"blocks/slider/","title":"Slider","text":"<p>The slider block can be used to allow guests to choose a value or a range within a specified boundaries.</p>"},{"location":"blocks/slider/#output","title":"Output","text":"<p>The selected value or range as JSON.</p>"},{"location":"blocks/slider/#parameters","title":"Parameters","text":""},{"location":"blocks/slider/#type","title":"Type","text":"<p>Value or Range.</p>"},{"location":"blocks/slider/#label","title":"Label","text":"<p>You can change the text above the dropdown to something else than the default \"Choose an item\".</p>"},{"location":"blocks/slider/#min-max-step","title":"Min, Max, Step","text":"<p>Define the lower bound (Min), the upper bound (Max), and the interval between the values (Step).</p>"},{"location":"blocks/slider/#initial-value-or-begin-and-end","title":"Initial Value (or Begin and End)","text":"<p>Initial value (for the value type) or initial begin and end (for the range type).</p>"},{"location":"blocks/slider/#decimal-places","title":"Decimal Places","text":"<p>The number of decimals to use.</p>"},{"location":"blocks/slider/#advanced-range-optional","title":"Advanced Range (Optional)","text":"<p>Define a lower bound (Range Min) and an upper bound (Range Max) for the range itself.</p>"},{"location":"blocks/slider/#examples","title":"Examples","text":"<p>Slider Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the slider block.</p>"},{"location":"blocks/textEditor/","title":"Text Editor","text":"<p>The Text Editor can be used to define values of a couple of text-based formats that can be chosen from the dropdown. This selection will be used for validation of the content and for controlling the type of data shared between blocks.</p>"},{"location":"blocks/textEditor/#output","title":"Output","text":"<p>The content of the block.</p>"},{"location":"blocks/textEditor/#formats","title":"Formats","text":"<p>JSON, XML, Text, HTML, CSV, Markdown, SVG, Python, R, JavaScript, TypeScript, SQL, YAML</p>"},{"location":"blocks/textEditor/#parameters","title":"Parameters","text":""},{"location":"blocks/textEditor/#label","title":"Label","text":"<p>Text above the editor</p>"},{"location":"blocks/textEditor/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks.</p>"},{"location":"blocks/textEditor/#publicly-editable","title":"Publicly editable","text":"<p>Visitors of the page can play with the content. This can be useful in combination with Python scripts that do any standardized calculation on custom input.</p>"},{"location":"blocks/textEditor/#examples","title":"Examples","text":"<p>Text Editor and Text Viewer Blocks on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the text editor.</p>"},{"location":"blocks/textViewer/","title":"Text Viewer","text":"<p>The Text Viewer block can be fed with text from the output from any block in the post. If the data changes, the viewer will be updated.</p>"},{"location":"blocks/textViewer/#output","title":"Output","text":"<p>No output.</p>"},{"location":"blocks/textViewer/#input","title":"Input","text":"<p>Only the following contentType are considered as viewer's input:</p> <ul> <li>application/json</li> <li>application/xml</li> <li>text/plain</li> <li>text/html</li> <li>text/csv</li> <li>text/markdown</li> <li>image/svg+xml</li> <li>text/x-python</li> <li>text/x-r</li> <li>application/javascript</li> <li>application/typescript</li> <li>application/sql</li> <li>application/x-yaml</li> <li>text/*</li> </ul>"},{"location":"blocks/textViewer/#parameters","title":"Parameters","text":""},{"location":"blocks/textViewer/#label","title":"Label","text":"<p>Title above the displayed text.</p>"},{"location":"blocks/textViewer/#examples","title":"Examples","text":"<p>Text Editor and Text Viewer Blocks on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the text viewer block.</p>"},{"location":"blocks/webApi/","title":"Web API","text":"<p>With the Web API block, you can call a web API to include data or computational results from an external source into your post.</p>"},{"location":"blocks/webApi/#output","title":"Output","text":"<p>The Web API response.</p>"},{"location":"blocks/webApi/#quick-configuration","title":"Quick configuration","text":"<p>For GET requests without additional parameters, it is enough to enter the URL and the response data type.</p>"},{"location":"blocks/webApi/#input","title":"Input","text":"<p>Below in the extended configuration one can define inputs for URL, query parameters, headers and body.</p>"},{"location":"blocks/webApi/#extended-configuration","title":"Extended configuration","text":""},{"location":"blocks/webApi/#static-values","title":"Static values","text":"<p>The options for the Web API settings follow the usual specifications for HTTP:</p> <ul> <li> <p>Method: <code>GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, <code>OPTIONS</code>, <code>PATCH</code></p> </li> <li> <p>URL: An URL without query params</p> </li> <li> <p>Query params</p> </li> <li> <p>Headers</p> </li> <li> <p>Body</p> </li> <li> <p>Content Type: The expected response type. It can be unlocked, and by \"Try request\" the value is overwritten. In order to edit it first unlock it, update it as desired and lock it.</p> </li> </ul> <p>Additionally, you can add a persistent identifier to quote the data source:</p> <ul> <li>PID (DOI, ARK, URN or PURL)</li> </ul>"},{"location":"blocks/webApi/#dynamic-values","title":"Dynamic values","text":"<p>Some static values can be overwritten or extended by dynamic values from other blocks:</p> <ul> <li> <p>Method and URL's expected input (\"Override method and URL\"):</p> </li> <li> <p>Query Params's expected input (\"Extend query params\"):</p> </li> <li> <p>Headers's expected input (\"Extend headers\"):</p> </li> <li> <p>Body's expected input (\"Override body\"):</p> </li> </ul> <p>WebAPI's output will be web api call's data. Please double check that after customizations, the correct contentType is still chosen.</p>"},{"location":"blocks/webApi/#parameters","title":"Parameters","text":""},{"location":"blocks/webApi/#action-text","title":"Action text","text":"<p>You can change the text in the button to something different than \"Call Web API\".</p>"},{"location":"blocks/webApi/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if you set it to execute automatically.</p>"},{"location":"blocks/webApi/#call-automatically","title":"Call automatically","text":"<p>The web API will be called initially and on changes of the inputs.</p>"},{"location":"blocks/webApi/#examples","title":"Examples","text":"<p>Web API Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the web API block.</p>"},{"location":"blocks/zenodo/","title":"Zenodo Repository","text":"<p>Fetch data from Zenodo by a DOI and re-use data in your inseri post.</p> <p>When a top-level DOI is used as input (called also Concept DOI), it is resolved to the latest version DOI which is dynamically updated.</p>"},{"location":"blocks/zenodo/#output","title":"Output","text":"<p>The selected file.</p>"},{"location":"blocks/zenodo/#input","title":"Input","text":"<p>A valid DOI starting with <code>10.5281/zenodo.</code></p>"},{"location":"blocks/zenodo/#parameters","title":"Parameters","text":""},{"location":"blocks/zenodo/#label","title":"Label","text":"<p>Change to another label than \"Choose a file\".</p>"},{"location":"blocks/zenodo/#show-block","title":"Show block","text":"<p>The block can be hidden from readers but its content is still available as input for other blocks. You can hide it only if the source serves a single file.</p>"},{"location":"blocks/zenodo/#examples","title":"Examples","text":"<p>Zenodo Repository Block on inseri.swiss.</p> <p>Posts on inseri.swiss that make use of the zenodo repository block.</p>"},{"location":"features/block_duplication/","title":"Block Duplication","text":"<p>The inseri blocks are connected. By copy and pasting or duplicating several blocks at once, the dependency between them is preserved such that they are easily reusable.</p> <p>For example if you try in our playground to Copy and Paste all blocks from Python Code Block using Pyodide, the corresponding Data Flow chart will look like below.</p> <p></p>"},{"location":"features/data_flow/","title":"Data Flow","text":"<p>inseri Data Flow is available in the inseri Sidebar and provides an overview of the used inseri blocks and their dependencies via a corresponding directed acyclic graph (DAG).</p> <p> </p>  Data Flow: (i) select \"inseri\" icon close to the Settings icon, (ii) select a block name in the \"inseri Blocks\" section or a node in the \"Data Flow Chart\" section  <p>The inseri Blocks section provides all inseri compatible blocks, and the Data Flow Chart section provides an overview as a directed acyclic graph (DAG) where the inseri blocks are represented as nodes and the edges correspond to the data. There are several actions that the user can perform:</p> <ul> <li>by hovering a block from the inseri Blocks section, the corresponding node from the \"Data Flow Chart\" section is highlighted (the margin changes from grey to dark grey).</li> <li>by selecting a block from the inseri Blocks section, the corresponding node from the \"Data Flow Chart\" section is selected (the color changes from grey to blue). Moreover, the block is highlighted also in the working area.</li> <li>by hovering a node from the Data Flow Chart section, the corresponding block from the \"inseri Blocks\" section is highlighted.</li> <li>by selecting a node from the Data Flow Chart section, the corresponding block from the \"inseri Blocks\" section is selected. Moreover, the block is highlighted also in the working area.</li> </ul> <p>By clicking on the icon before \"Data Flow Chart\", a popup with the DAG is displayed where the name of the blocks is shown. By using \"Show Details\" (top right) a more complex diagram is displayed where one see exactly which data from a given block is used. You can control the font size (the value in top right is editable) and the position of the nodes.</p> <p> </p>  Data Flow Popup: click on the icon before \"Data Flow Chart\".  <p>A similar example can be obtain by following Hello World tutorial.</p>"},{"location":"features/hide_invisible_blocks/","title":"Hide invisible blocks","text":"<p>This feature is available in the inseri Sidebar and it hides all invisible blocks. Therefore it enables in edit mode an experience similar to the published mode, so as it is experienced by the guests.</p> <p>inseri core provides the following blocks that support this feature:</p> <ul> <li>JavaScript Code block</li> <li>Media Collection block when only one file is desired</li> <li>Python Code block</li> <li>R Code block</li> <li>Text Editor block</li> <li>Web API block</li> <li>Zenodo Repository block when only one file is desired</li> </ul> <p>As a concrete example, please see below how to hide the Text Editor block from the Hello World.</p> <p> </p>  Hide the text editor and the invisible blocks"},{"location":"features/open_citable/","title":"Open and Citable","text":"<p>inseri is designed to enable open and citable content</p> <ul> <li>open: by using the Export Block one can allow any visitor to download the page in a reusable format,</li> <li>citable: by depositing the previously generated content to a data repository, e.g. Zenodo, it is possible to have a better longevity but to obtain also a persistent identifier (PID) that makes the content citable. Please see How to: Deposit Content.</li> </ul>"},{"location":"features/publicly_editable/","title":"Publicly Editable","text":"<p>This feature allows the visitors to edit the text content. The page author can disable it, so the content becomes read-only.</p> <p>inseri core provides the following blocks that can be public editable:</p> <ul> <li>JavaScript Code block</li> <li>Python Code block</li> <li>R Code block</li> <li>Text Editor block</li> </ul> <p> </p>  Editable and read-only behavior is marked in the top right corner of the block  <p>As a concrete example, please see the Python Code Block using Pyodide.</p>"},{"location":"features/share_state/","title":"Share State","text":"<p>This feature allows the visitors to share the state of a page with other visitors. Therefore other people can reproduce the precise selection and changes. It is enabled via the Share block.</p> <p>inseri core provides the following blocks that can be hidden:</p> <ul> <li>Cytoscape</li> <li>Data Table</li> <li>Dropdown</li> <li>JavaScript Code block</li> <li>Media Collection block</li> <li>Plotly Chart block</li> <li>Python Code block</li> <li>R Code block</li> <li>Slider block</li> <li>Text Editor block</li> <li>Zenodo Repository block</li> </ul> <p>As a concrete example, please see Share Block.</p>"},{"location":"features/sidebar/","title":"inseri Sidebar","text":"<p>inseri Sidebar provides several inseri features. In order to open it one has to click the inseri icon available in the upper-right corner, close to the Settings icon.</p> <p> </p>  Open \"inseri sidebar\" by clicking on inseri icon close to the Settings icon <p>If the icon is not visible, because it is unpinned, you can open the sidebar via the options menu (see below).</p> <p> </p>  Open inseri sidebar: (i) click on Options, (ii) click on inseri in the PLUGINS section  <p>If you want to have the inseri icon in the toolbar you should pin it to the toolbar:</p> <p> </p>  Pin inseri icon to the toolbar by clicking on inseri icon available in the inseri sidebar"},{"location":"how-to/deposit_content/","title":"Deposit Content","text":"<p>Open and Citable is an important feature of inseri core plugin. The exported content can be deposited to a research data repository.</p> <p>Since the exported content is small we recommend you to deposit the unzipped content.</p>"},{"location":"how-to/deposit_content/#zenodo","title":"Zenodo","text":"<p>Please follow Zenodo Deposit Documentation.</p>"},{"location":"how-to/playground/","title":"Playground","text":"<p>inseri Playground relies on WordPress Playground to provide a playground where you can try out our inseri core plugin and explore (inspect and even edit) all our showcases.</p> <p>Be aware that your changes in the playground are temporary and will be gone after a page refresh.</p>"},{"location":"how-to/playground/#how-to-use-inseri-playground","title":"How to use inseri Playground","text":"<ol> <li>Open inseri playground</li> <li>Click on \"Start inseri Playground\"</li> <li>Wait until you can see a page \"Playground - inseri core\"</li> <li>Select a post that you are interested to explore (e.g., \"Hello World\", available in \"Older Posts\" blocks)</li> <li>Click Edit Post.</li> <li>Voil\u00e0. You can explore this post!</li> </ol>"},{"location":"how-to/python_packages/","title":"Python Packages","text":"<p>Python Code block is using Pyodide which behaves slightly different compared to CPython. Pyodide comes with many built-in packages, e.g., <code>numpy</code>, <code>pandas</code>, <code>matplotlib</code>. So they are ready to be loaded and used. For more details please see Pyodide - Loading packages.</p>"},{"location":"how-to/python_packages/#how-to-install-python-package","title":"How to install Python Package","text":"<p>In case you want to use a packages that is not pre-installed, be aware that you can install only pure Python wheels or binary wasm32/emscripted wheels. This can be done using <code>micropip</code>. For example if you want to install <code>plotly</code> you have to do:</p> <pre><code>import micropip\nawait micropip.install('plotly');\n</code></pre> <p>For a fully working example see Python and Plotly. For more details please see Pyodide - Installing packages.</p>"},{"location":"how-to/python_packages/#how-to-install-requests-package","title":"How to install requests package","text":"<p><code>requests</code> package is available in inseri core \u2265 0.3.5. If you use an older older version, please update.</p> <p>For a fully working example see Python and Requests Package.</p>"},{"location":"how-to/r_packages/","title":"R Packages","text":"<p>R Code block is using WebR which supports loading R packages that have been compiled for WebAssembly.</p>"},{"location":"how-to/r_packages/#how-to-install-r-package","title":"How to install R Package","text":"<p>When a package is missing it is downloaded from the default webR binary package repository. But be aware that you can use only the R packages already compiled for WebAssembly:</p> <pre><code>library(plotly)\n</code></pre> <p>For a fully working example see R and Plotly. For more details please see WebR - Installing R Packages.</p>"},{"location":"how-to/visualizations/","title":"Visualizations","text":""},{"location":"how-to/visualizations/#how-to-use-plotly-with-json","title":"How to use Plotly with JSON","text":"<p>If you already have your Plotly chart in a JSON format, you can easily add it using inseri core plugin:</p> <ol> <li> <p>add a Text Editor Block (JSON format) and paste your JSON. Use a sensible block name and if you want to hide it disable \"Show block\". If you are new to inseri consider Hello World tutorial.</p> </li> <li> <p>add a Plotly Chart Block and pick the previous block as input for the full JSON description and click Display. You are done.</p> </li> </ol>"},{"location":"how-to/visualizations/#how-to-use-plotly-with-python","title":"How to use Plotly with Python","text":"<p>Please see Python and Plotly.</p>"},{"location":"how-to/visualizations/#how-to-use-plotly-with-r","title":"How to use Plotly with R","text":"<p>Please see R and Plotly.</p>"},{"location":"how-to/visualizations/#how-to-use-matplotlib-with-python","title":"How to use Matplotlib with Python","text":"<p>Please see Python and Matplotlib.</p>"},{"location":"how-to/visualizations/#plotly-or-matplotlib","title":"Plotly or Matplotlib","text":"<p>inseri supports both Plotly and Matplotlib. Which one you want to use is first of all a matter of taste.</p> <p>There are some differences: Matplotlib works with files which means it can be combined with a download block to reuse the result. Plotly offers more interactive options than a static image would, and</p>"},{"location":"how-to/visualizations/#how-to-use-ggplot2-with-r","title":"How to use ggplot2 with R","text":"<p>Please see R and Plotting.</p>"},{"location":"how-to/work_with_files/","title":"Working with files","text":""},{"location":"how-to/work_with_files/#how-to-communicate-binary-files-between-blocks","title":"How to communicate binary files between blocks","text":"<p>With the Media Collection block or the Local File Import block, you can easily load binary files into a post to display them with e.g. an Image Box block. If the file is generated in a Python Code or R Code block, the file will be automatically made available to other blocks that can use them as input.</p> <p>Make sure that the content types are compatible, because otherwise you will not be able to use it as input.</p> <p>Python and Matplotlib shows an example on how to share a binary file between two blocks.</p>"},{"location":"how-to/work_with_files/#how-to-transform-a-csv-to-a-json","title":"How to transform a CSV to a JSON","text":"<p>Python Code block allows you to read the CSV - see <code>pandas.read_csv</code>. Next, the DataFrame can be used for the transformations, and next the <code>pandas.DataFrame.to_dict</code> to generate a Python dictionary, which is automatically converted into a JSON. Pay attention at the different <code>orient</code> parameter, e.g. <code>records</code> can be used in a Data Table block.</p> <p>For an example please see Global Student Visa Cost.</p>"},{"location":"tutorials/data_mapping_with_python/","title":"Data Mapping with Python","text":"<p>This tutorial will give a simple example how you can split complex data coming from a block (e.g. the Web API block) into simpler structures, using the Python Code block. For this we have to join a couple of inseri blocks.</p> <p>If you have no experience with inseri, please start with our Hello World.</p> <p>For the final experience, please click here.</p>"},{"location":"tutorials/data_mapping_with_python/#step-1-create-a-new-post","title":"Step 1: Create a new post","text":"<p>On your inseri instance or in the inseri Playground (remember, your changes will not be saved there), add a new post and give it a title. In this example, we call the post \"Data Mapping with Python\". You can type this at \"Add title...\".</p>"},{"location":"tutorials/data_mapping_with_python/#step-2-add-the-web-api-block","title":"Step 2: Add the Web API block","text":"<ol> <li>Add the \"Web API\" block (like in the Step 2.1. from Hello World).</li> <li>Enter the following URL in the corresponding field.    <pre><code>https://raw.githubusercontent.com/inseri-swiss/inseri-core-wp/main/docs/assets/book_metadata.json\n</code></pre></li> <li>Choose \"JSON\" as Content Type because the Web API will fetch a JSON file.</li> <li>Click \"Finish\".</li> <li>Give the web API block the simple name \"webApi\" (like in Step 2.3. from Hello World).</li> <li>Disable Call automatically (the setting is the below \"BLOCK NAME\"). In order to fetch the data, you have to click on the button \"Call Web API\".</li> <li>For testing the request you should click on \"Configure the settings\" (in the sidebar above the \"BLOCK NAME\" above), and click on \"TRY REQUEST\" (see the picture below).</li> <li>Close the view.</li> </ol> Step 2: Click on \"TRY REQUEST\" to test the request of the Web API block <p>It should give the following content:</p> <pre><code>{\n    \"title\": \"Die Physiker\",\n    \"author\": \"Friedrich D\u00fcrrenmatt\",\n    \"publisher\": {\n        \"name\": \"Arche\",\n        \"place\": \"Z\u00fcrich\"\n    },\n    \"year\": 1962\n}\n</code></pre>"},{"location":"tutorials/data_mapping_with_python/#step-3-add-the-python-code-block","title":"Step 3: Add the Python Code block","text":"<ol> <li>Add the \"Python Code\" block.</li> <li>Select \"Write Code\". This way you can add the code directly in this block.</li> <li>Give the Python Code block the simple name \"python\"</li> <li>Copy the following snippet into the Python code editor:</li> </ol> <pre><code>title = data[\"title\"]\nauthor = data[\"author\"]\nyear = data[\"year\"]\npublisher = data[\"publisher\"]\n</code></pre> <p>Obviously, this is not yet complete because <code>data</code> is not defined anywhere in the code.</p>"},{"location":"tutorials/data_mapping_with_python/#step-4-open-the-extended-view-of-the-python-code-block","title":"Step 4: Open the extended view of the Python Code block","text":"Step 4: Python block in extended view <ol> <li>To open the extended view you should click on \"Open extended view\" (in the sidebar above the \"BLOCK NAME\").</li> <li>Under \"Inputs from Blocks\", enter the variable name <code>data</code> and accept it with selecting the <code>+</code>.    You can now select <code>webApi - data</code> to connect this block to the web API block.</li> <li>Define the outputs under \"Output to Blocks\".    As with the input, enter a variable name from the script into the textbox and accept with <code>+</code>.    For <code>title</code>, <code>author</code>, <code>year</code>, and <code>publisher</code> set the content type to \"JSON\".</li> <li>Add a <code>print</code> statement (see below an example) to check whether the output variables have the desired value. Once everything looks as expected, remove or comment out the print statement. The extended view of the Python block should now look like the picture above.    <pre><code>print(title, author, year, publisher, sep=\"\\n\")\n</code></pre></li> <li>Comment out the <code>print</code> statement.</li> <li>Close the extended view.</li> <li>Make sure that the block is set to execute automatically (see the picture below).</li> </ol> <p>Note</p> <p>You can hide the Python block if you want (the setting is above the execute automatically option).</p> <p></p> Step 4: Execute automatically setting of the Python block"},{"location":"tutorials/data_mapping_with_python/#step-5-add-the-text-viewer-blocks","title":"Step 5: Add the Text Viewer blocks","text":"<p>Now, add four Text Viewer blocks. Set their inputs, i.e., the block source, to <code>python - author</code>, <code>python - year</code>, <code>python - title</code>, <code>python - publisher</code>, respectively.</p> <p>Note</p> <p>You can edit the source of the Text Viewer block by clicking on the edit icon. This can be used for other inseri core blocks as well.</p> <p></p> Step 5: You can edit the source used by the Text Viewer block"},{"location":"tutorials/data_mapping_with_python/#step-6-save-and-publish","title":"Step 6: Save and publish","text":"<p>You can save and publish your post like any WordPress post.</p> <p>Once published, the four text blocks will show their content after you press \"Call Web API\".</p> <p>If you change the web-API block to execute automatically, the content will appear immediately.</p>"},{"location":"tutorials/data_mapping_with_python/#overview","title":"Overview","text":"<p>The Data Flow Chart provides a nice overview. You can see it also at the bottom of the Data Mapping with Python.</p>"},{"location":"tutorials/hello_world/","title":"Hello World","text":"<p>This tutorial allows you to chain multiple inseri blocks, with the specific example focusing on:</p> <ul> <li>Adding predefined images in dropdown menu</li> <li>Allowing the end user to select the images to display</li> </ul> <p>For the final product, please click here.</p>"},{"location":"tutorials/hello_world/#step-0-initialize-your-inseri-instance","title":"Step 0: Initialize your inseri instance","text":"<p>Start inseri Playground or your WordPress instance. In your WordPress instance make sure <code>inseri-core</code> plugin is installed (it is already instsalled in the inseri playground).</p> <p>Beware that changes done in the playground will not be saved.</p>"},{"location":"tutorials/hello_world/#step-1-create-a-new-post","title":"Step 1: Create a new post","text":"<p>Add a new post with the title \"Hello World\", as presented in the figure below.</p> <p> </p> Step 1: Adding a new post in WordPress: (i) hover on mouse pointer over New and next, (ii) click on Post (or click directly on New)"},{"location":"tutorials/hello_world/#step-2-add-the-text-editor-block","title":"Step 2: Add the Text Editor block","text":"Step 2: Adding a new block in WordPress by typing the forward-slash \"/\" and the block name (see the left side) or using the \"+\" icon and searching the block name (see the right side).  <ol> <li>Add the Text Editor block by using the slash command, i.e., typing \"/text editor\" in the area \"Type / to choose a block\". Alternatively, you can use the Block inserter, i.e., the \"+\" icon below the title, and type \"text editor\" in the Search area.</li> <li>Choose the format \"JSON\".</li> <li>Next, rename your Text Editor block. For this, open the settings sidebar on the right and enter simply \"textEditor\" under \"BLOCK NAME\".</li> </ol> Step 2: Edit the block name: (i) open the settings sidebar, (ii) enter the desired name under \"BLOCK NAME\" <p>Note</p> <p>The same block name is displayed in the WordPress List View.</p> <p>Note</p> <p>You can hide the text editor block if you want (the setting is below the \"BLOCK NAME\", and is called \"Show block\" that by default is enabled).</p>"},{"location":"tutorials/hello_world/#step-3-add-dropdown-and-image-information-to-the-text-editor","title":"Step 3: Add dropdown and image information to the text editor","text":"<ol> <li>Now, copy the following snippet into the text editor. This will add two options (\"inseri Logo\" and \"inseri Full Logo\") to the dropdown (see the \"label\" values below). Moreover the \"value\" values will be used to fetch the image and display it in Step 5.</li> </ol> <pre><code>[\n    { \"label\": \"inseri Logo\", \"value\": \"https://raw.githubusercontent.com/inseri-swiss/inseri-core-wp/main/docs/assets/inseri_logo.svg\" },\n    { \"label\": \"inseri Full Logo\", \"value\": \"https://raw.githubusercontent.com/inseri-swiss/inseri-core-wp/main/docs/assets/inseri_logo_full.svg\" }\n]\n</code></pre>"},{"location":"tutorials/hello_world/#step-4-add-the-dropdown-block","title":"Step 4: Add the Dropdown block","text":"<ol> <li>Add the \"Dropdown\" block (like in Step 2.1.).</li> <li>Select the block source with the name \"textEditor - content\".</li> <li>Give the Dropdown block a simple name \"dropdown\" (like in Step 2.3.).</li> <li>Choose a value (e.g., \"inseri Logo\").</li> </ol> <p>Note</p> <p>You can edit the text \"Choose an item\" by using the \"LABEL\" area below the \"BLOCK NAME\".</p>"},{"location":"tutorials/hello_world/#step-5-add-the-image-box-block","title":"Step 5: Add the Image Box block","text":"<ol> <li>Add the \"Image Box\" block (like in Step 2.1.).</li> <li> <p>Select the block source with the name \"dropdown - chosen value\".</p> <p>Warning</p> <p>If you cannot see the block source, make sure that you did Step 4.4.</p> </li> <li> <p>Give the Image Box block the name (like in Step 2.3.).</p> </li> <li>Set the Height to 200.</li> </ol>"},{"location":"tutorials/hello_world/#step-6-data-flow","title":"Step 6: Data Flow","text":"<p>The Data Flow provides an overview of the inseri blocks and the dependency between them. The data flow corresponding to this tutorial should be similar to the one below.</p> <p> </p> Step 6: Data Flow: (i) select \"inseri\" close to the Settings icon, (ii) select a block name in the \"inseri Blocks\" section or a node in the \"Data Flow Chart\" section."},{"location":"tutorials/hello_world/#step-7-save-and-publish","title":"Step 7: Save and publish","text":"<p>For the final step, you should save your post and publish it (The \"Save draft\" and \"Publish\" buttons are in the top right close to the Settings icon).</p> <p>Once published, you can view the post and you will see the text editor with the snippet (step 3) and a dropdown (step 4), where the corresponding image will load after the selection.</p>"},{"location":"tutorials/hello_world/#overview","title":"Overview","text":"<p>The Data Flow Chart (see Step 6) provides a nice overview. You can see it also at the bottom of the Hello World.</p>"}]}